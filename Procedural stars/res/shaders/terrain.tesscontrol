#version 410 core

layout (vertices = 3) out;

uniform int u_edges[4];

in VertexOut {
    vec3 position;
    vec3 normal;
    vec3 color;
    int edge;
} vertex_in[];

out TSC {
    vec3 position;
    vec3 normal;
    vec3 color;
} vertex_out[];

int GetTessLevel(double dist, double size);
void main()
{
    // Set the control points of the output patch
    vertex_out[gl_InvocationID].position = vertex_in[gl_InvocationID].position;
    vertex_out[gl_InvocationID].normal = vertex_in[gl_InvocationID].normal;
    vertex_out[gl_InvocationID].color = vertex_in[gl_InvocationID].color;

    // edge crack filling
    {
        // u_edges[0] = top
        // u_edges[1] = bottom
        // u_edges[2] = left
        // u_edges[3] = right

        gl_TessLevelOuter[0] = 1;
        gl_TessLevelOuter[1] = 1;
        gl_TessLevelOuter[2] = 1;
        // top bottom
        if (vertex_in[2].edge == 1 && u_edges[1] > 0) {
            gl_TessLevelOuter[2] = 2;
        } 
        else if (vertex_in[2].edge == 2 && u_edges[0] > 0){
            gl_TessLevelOuter[2] = 2;
        }

        // left right
        if (vertex_in[0].edge == 1 && u_edges[2] > 0) {
            gl_TessLevelOuter[0] = 2;
        }
        else if (vertex_in[0].edge == 2 && u_edges[3] > 0) {
            gl_TessLevelOuter[0] = 2;
        }

        // constant
        gl_TessLevelInner[0] = 1;
    }
} 